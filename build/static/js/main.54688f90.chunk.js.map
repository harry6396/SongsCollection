{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleKeyPress","e","key","searchSongs","target","value","console","log","state","songsDetails","fetchSongs","selectedLevel","toShowMenu","bind","assertThisInitialized","_this2","fetch","then","res","json","result","setState","JSON","parse","status","error","isLoaded","searchKeyword","_this3","_this4","react_default","a","createElement","className","type","placeholder","onKeyDown","keys","length","map","reactjs_popup_es","trigger","position","react_loader_spinner_default","color","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.54688f90.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Popup from \"reactjs-popup\";\nimport Loader from 'react-loader-spinner'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n        this.state={\n            selectedLevel: \"Level first\",\n            toShowMenu: false,\n            songsDetails:[]\n        };\n        this.fetchSongs = this.fetchSongs.bind(this);\n        this.searchSongs = this.searchSongs.bind(this);\n        this.fetchSongs();\n    }\n\n    _handleKeyPress = (e) => {\n      if (e.key === 'Enter') {\n        this.searchSongs(e.target.value);\n        console.log(this.state.songsDetails);\n      }\n      else if(e.key === 8){\n        this.fetchSongs();\n      }\n    }\n\n    fetchSongs(){\n      fetch(\"https://afternoon-anchorage-53123.herokuapp.com\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n         this.setState({songsDetails:JSON.parse(result).status});\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n\n    searchSongs(searchKeyword){\n      fetch(\"https://afternoon-anchorage-53123.herokuapp.com/\"+searchKeyword)\n      .then(res => res.json())\n      .then(\n        (result) => {\n         this.setState({songsDetails:JSON.parse(result).status});\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n    }\n\n  render() {\n    return (\n      <div >\n        <div className=\"App\">Welcome to Songs Collection</div>\n        <div className=\"headContainer\">\n        <input type=\"text\" className=\"App-Search\" placeholder=\"Search song\" onKeyDown={this._handleKeyPress}/>\n        <div className=\"fa fa-search search-icon\"></div>\n        </div>\n        {Object.keys(this.state.songsDetails).length>0?\n        <div className=\"songContainer\">\n          {Object.keys(this.state.songsDetails).map(key => (\n          <Popup trigger={\n            <div className=\"songs\">\n            <div>Song Name:- {this.state.songsDetails[key][0]}</div>\n            <div>Artist:- {this.state.songsDetails[key][1]}</div>\n            <div>Duration:- {this.state.songsDetails[key][14]}:00</div>\n            <div>Song Rank:- {this.state.songsDetails[key][15]}</div>\n            </div>\n            } position=\"right center\">\n            <div className=\"Popup-Content\"><div>Song Name:- {this.state.songsDetails[key][0]}</div>\n            <div>Artist:- {this.state.songsDetails[key][1]}</div>\n            <div>Danceability:- {this.state.songsDetails[key][2]}</div>\n            <div>Energy:- {this.state.songsDetails[key][3]}</div></div>\n            <div>Key:- {this.state.songsDetails[key][4]}</div>\n            <div>Loudness:- {this.state.songsDetails[key][5]}</div>\n            <div>Modes:- {this.state.songsDetails[key][6]}</div>\n            <div>Speechiness:- {this.state.songsDetails[key][7]}</div>\n            <div>Acousticness:- {this.state.songsDetails[key][8]}</div>\n            <div>Instrumental:- {this.state.songsDetails[key][9]}</div>\n            <div>Liveness:- {this.state.songsDetails[key][10]}</div>\n            <div>Valence:- {this.state.songsDetails[key][11]}</div>\n            <div>Tempo:- {this.state.songsDetails[key][12]}</div>\n            <div>Time Signature:- {this.state.songsDetails[key][13]}</div>\n            <div>Duration:- {this.state.songsDetails[key][14]}</div>\n            <div>Song Rank:- {this.state.songsDetails[key][15]}</div>\n            </Popup>\n          ))}</div>:<div className=\"Loader\"><Loader type=\"Circles\" color=\"#somecolor\" height={80} width={80}/></div>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}